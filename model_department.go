/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Department struct for Department
type Department struct {
	// The department ID.
	DepartmentId int32 `json:"department_id"`
	// The tenant this department belongs to
	Tenant int32 `json:"tenant"`
	// Name of the department
	Name string `json:"name"`
	// Description of the department
	Description NullableString `json:"description,omitempty"`
	Employees []int32 `json:"employees"`
	Admins []int32 `json:"admins"`
}

// NewDepartment instantiates a new Department object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepartment(departmentId int32, tenant int32, name string, employees []int32, admins []int32) *Department {
	this := Department{}
	this.DepartmentId = departmentId
	this.Tenant = tenant
	this.Name = name
	this.Employees = employees
	this.Admins = admins
	return &this
}

// NewDepartmentWithDefaults instantiates a new Department object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepartmentWithDefaults() *Department {
	this := Department{}
	return &this
}

// GetDepartmentId returns the DepartmentId field value
func (o *Department) GetDepartmentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DepartmentId
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value
// and a boolean to check if the value has been set.
func (o *Department) GetDepartmentIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DepartmentId, true
}

// SetDepartmentId sets field value
func (o *Department) SetDepartmentId(v int32) {
	o.DepartmentId = v
}

// GetTenant returns the Tenant field value
func (o *Department) GetTenant() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value
// and a boolean to check if the value has been set.
func (o *Department) GetTenantOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tenant, true
}

// SetTenant sets field value
func (o *Department) SetTenant(v int32) {
	o.Tenant = v
}

// GetName returns the Name field value
func (o *Department) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Department) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Department) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Department) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Department) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Department) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Department) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Department) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Department) UnsetDescription() {
	o.Description.Unset()
}

// GetEmployees returns the Employees field value
func (o *Department) GetEmployees() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Employees
}

// GetEmployeesOk returns a tuple with the Employees field value
// and a boolean to check if the value has been set.
func (o *Department) GetEmployeesOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Employees, true
}

// SetEmployees sets field value
func (o *Department) SetEmployees(v []int32) {
	o.Employees = v
}

// GetAdmins returns the Admins field value
func (o *Department) GetAdmins() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Admins
}

// GetAdminsOk returns a tuple with the Admins field value
// and a boolean to check if the value has been set.
func (o *Department) GetAdminsOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Admins, true
}

// SetAdmins sets field value
func (o *Department) SetAdmins(v []int32) {
	o.Admins = v
}

func (o Department) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["department_id"] = o.DepartmentId
	}
	if true {
		toSerialize["tenant"] = o.Tenant
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["employees"] = o.Employees
	}
	if true {
		toSerialize["admins"] = o.Admins
	}
	return json.Marshal(toSerialize)
}

type NullableDepartment struct {
	value *Department
	isSet bool
}

func (v NullableDepartment) Get() *Department {
	return v.value
}

func (v *NullableDepartment) Set(val *Department) {
	v.value = val
	v.isSet = true
}

func (v NullableDepartment) IsSet() bool {
	return v.isSet
}

func (v *NullableDepartment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepartment(val *Department) *NullableDepartment {
	return &NullableDepartment{value: val, isSet: true}
}

func (v NullableDepartment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepartment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


