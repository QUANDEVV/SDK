/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Tenant struct for Tenant
type Tenant struct {
	// The tenant chats ID.
	TenantId int32 `json:"tenant_id"`
	// name of the company
	TenantName string `json:"tenant_name"`
	// Industry of the company  * `IT` - Information Technology * `Finance` - Finance * `Healthcare` - Healthcare * `Education` - Education * `Retail` - Retail * `Manufacturing` - Manufacturing * `Automotive` - Automotive * `Hospitality` - Hospitality * `RealEstate` - Real Estate * `Media` - Media * `Telecommunications` - Telecommunications * `Energy` - Energy * `Transportation` - Transportation * `Agriculture` - Agriculture
	Industry IndustryEnum `json:"industry"`
	// Token for the tenant
	Token NullableString `json:"token,omitempty"`
	SubCategory NullableString `json:"sub_category,omitempty"`
	// The business registration number
	RegistrationNumber NullableString `json:"registration_number,omitempty"`
}

// NewTenant instantiates a new Tenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenant(tenantId int32, tenantName string, industry IndustryEnum) *Tenant {
	this := Tenant{}
	this.TenantId = tenantId
	this.TenantName = tenantName
	this.Industry = industry
	return &this
}

// NewTenantWithDefaults instantiates a new Tenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantWithDefaults() *Tenant {
	this := Tenant{}
	return &this
}

// GetTenantId returns the TenantId field value
func (o *Tenant) GetTenantId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetTenantIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *Tenant) SetTenantId(v int32) {
	o.TenantId = v
}

// GetTenantName returns the TenantName field value
func (o *Tenant) GetTenantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantName
}

// GetTenantNameOk returns a tuple with the TenantName field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetTenantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantName, true
}

// SetTenantName sets field value
func (o *Tenant) SetTenantName(v string) {
	o.TenantName = v
}

// GetIndustry returns the Industry field value
// If the value is explicit nil, the zero value for IndustryEnum will be returned
func (o *Tenant) GetIndustry() IndustryEnum {
	if o == nil {
		var ret IndustryEnum
		return ret
	}

	return o.Industry
}

// GetIndustryOk returns a tuple with the Industry field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetIndustryOk() (*IndustryEnum, bool) {
	if o == nil || o.Industry == nil {
		return nil, false
	}
	return &o.Industry, true
}

// SetIndustry sets field value
func (o *Tenant) SetIndustry(v IndustryEnum) {
	o.Industry = v
}

// GetToken returns the Token field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetToken() string {
	if o == nil || o.Token.Get() == nil {
		var ret string
		return ret
	}
	return *o.Token.Get()
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Token.Get(), o.Token.IsSet()
}

// HasToken returns a boolean if a field has been set.
func (o *Tenant) HasToken() bool {
	if o != nil && o.Token.IsSet() {
		return true
	}

	return false
}

// SetToken gets a reference to the given NullableString and assigns it to the Token field.
func (o *Tenant) SetToken(v string) {
	o.Token.Set(&v)
}
// SetTokenNil sets the value for Token to be an explicit nil
func (o *Tenant) SetTokenNil() {
	o.Token.Set(nil)
}

// UnsetToken ensures that no value is present for Token, not even an explicit nil
func (o *Tenant) UnsetToken() {
	o.Token.Unset()
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetSubCategory() string {
	if o == nil || o.SubCategory.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubCategory.Get()
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetSubCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubCategory.Get(), o.SubCategory.IsSet()
}

// HasSubCategory returns a boolean if a field has been set.
func (o *Tenant) HasSubCategory() bool {
	if o != nil && o.SubCategory.IsSet() {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given NullableString and assigns it to the SubCategory field.
func (o *Tenant) SetSubCategory(v string) {
	o.SubCategory.Set(&v)
}
// SetSubCategoryNil sets the value for SubCategory to be an explicit nil
func (o *Tenant) SetSubCategoryNil() {
	o.SubCategory.Set(nil)
}

// UnsetSubCategory ensures that no value is present for SubCategory, not even an explicit nil
func (o *Tenant) UnsetSubCategory() {
	o.SubCategory.Unset()
}

// GetRegistrationNumber returns the RegistrationNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetRegistrationNumber() string {
	if o == nil || o.RegistrationNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegistrationNumber.Get()
}

// GetRegistrationNumberOk returns a tuple with the RegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetRegistrationNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationNumber.Get(), o.RegistrationNumber.IsSet()
}

// HasRegistrationNumber returns a boolean if a field has been set.
func (o *Tenant) HasRegistrationNumber() bool {
	if o != nil && o.RegistrationNumber.IsSet() {
		return true
	}

	return false
}

// SetRegistrationNumber gets a reference to the given NullableString and assigns it to the RegistrationNumber field.
func (o *Tenant) SetRegistrationNumber(v string) {
	o.RegistrationNumber.Set(&v)
}
// SetRegistrationNumberNil sets the value for RegistrationNumber to be an explicit nil
func (o *Tenant) SetRegistrationNumberNil() {
	o.RegistrationNumber.Set(nil)
}

// UnsetRegistrationNumber ensures that no value is present for RegistrationNumber, not even an explicit nil
func (o *Tenant) UnsetRegistrationNumber() {
	o.RegistrationNumber.Unset()
}

func (o Tenant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenant_id"] = o.TenantId
	}
	if true {
		toSerialize["tenant_name"] = o.TenantName
	}
	if o.Industry != nil {
		toSerialize["industry"] = o.Industry
	}
	if o.Token.IsSet() {
		toSerialize["token"] = o.Token.Get()
	}
	if o.SubCategory.IsSet() {
		toSerialize["sub_category"] = o.SubCategory.Get()
	}
	if o.RegistrationNumber.IsSet() {
		toSerialize["registration_number"] = o.RegistrationNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenant struct {
	value *Tenant
	isSet bool
}

func (v NullableTenant) Get() *Tenant {
	return v.value
}

func (v *NullableTenant) Set(val *Tenant) {
	v.value = val
	v.isSet = true
}

func (v NullableTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenant(val *Tenant) *NullableTenant {
	return &NullableTenant{value: val, isSet: true}
}

func (v NullableTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


