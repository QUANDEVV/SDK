/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UnverifiedUsers struct for UnverifiedUsers
type UnverifiedUsers struct {
	Email string `json:"email"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UserType OneOfUserType3daEnumNullEnum `json:"user_type,omitempty"`
}

// NewUnverifiedUsers instantiates a new UnverifiedUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnverifiedUsers(email string) *UnverifiedUsers {
	this := UnverifiedUsers{}
	this.Email = email
	return &this
}

// NewUnverifiedUsersWithDefaults instantiates a new UnverifiedUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnverifiedUsersWithDefaults() *UnverifiedUsers {
	this := UnverifiedUsers{}
	return &this
}

// GetEmail returns the Email field value
func (o *UnverifiedUsers) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UnverifiedUsers) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UnverifiedUsers) SetEmail(v string) {
	o.Email = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UnverifiedUsers) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnverifiedUsers) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UnverifiedUsers) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *UnverifiedUsers) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnverifiedUsers) GetUserType() OneOfUserType3daEnumNullEnum {
	if o == nil  {
		var ret OneOfUserType3daEnumNullEnum
		return ret
	}
	return o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnverifiedUsers) GetUserTypeOk() (*OneOfUserType3daEnumNullEnum, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return &o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *UnverifiedUsers) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given OneOfUserType3daEnumNullEnum and assigns it to the UserType field.
func (o *UnverifiedUsers) SetUserType(v OneOfUserType3daEnumNullEnum) {
	o.UserType = v
}

func (o UnverifiedUsers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UserType != nil {
		toSerialize["user_type"] = o.UserType
	}
	return json.Marshal(toSerialize)
}

type NullableUnverifiedUsers struct {
	value *UnverifiedUsers
	isSet bool
}

func (v NullableUnverifiedUsers) Get() *UnverifiedUsers {
	return v.value
}

func (v *NullableUnverifiedUsers) Set(val *UnverifiedUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableUnverifiedUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableUnverifiedUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnverifiedUsers(val *UnverifiedUsers) *NullableUnverifiedUsers {
	return &NullableUnverifiedUsers{value: val, isSet: true}
}

func (v NullableUnverifiedUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnverifiedUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


