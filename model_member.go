/*
proxima-core-engine

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Member struct for Member
type Member struct {
	Id int32 `json:"id"`
	Username string `json:"username"`
	Email string `json:"email"`
	FirstName string `json:"first_name"`
	LastName string `json:"last_name"`
	Phonenumber NullableString `json:"phonenumber,omitempty"`
	// Enter your gender.  * `Male` - Male * `Female` - Female * `Other` - Other
	Gender OneOfGenderEnumBlankEnumNullEnum `json:"gender,omitempty"`
	DOB NullableString `json:"DOB,omitempty"`
	JoinTimestamp time.Time `json:"join_timestamp"`
	IssuesCount int32 `json:"issues_count"`
	Rating float64 `json:"rating"`
}

// NewMember instantiates a new Member object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMember(id int32, username string, email string, firstName string, lastName string, joinTimestamp time.Time, issuesCount int32, rating float64) *Member {
	this := Member{}
	this.Id = id
	this.Username = username
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	this.JoinTimestamp = joinTimestamp
	this.IssuesCount = issuesCount
	this.Rating = rating
	return &this
}

// NewMemberWithDefaults instantiates a new Member object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberWithDefaults() *Member {
	this := Member{}
	return &this
}

// GetId returns the Id field value
func (o *Member) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Member) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Member) SetId(v int32) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *Member) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Member) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Member) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *Member) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Member) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Member) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value
func (o *Member) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *Member) GetFirstNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *Member) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *Member) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *Member) GetLastNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *Member) SetLastName(v string) {
	o.LastName = v
}

// GetPhonenumber returns the Phonenumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Member) GetPhonenumber() string {
	if o == nil || o.Phonenumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.Phonenumber.Get()
}

// GetPhonenumberOk returns a tuple with the Phonenumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Member) GetPhonenumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Phonenumber.Get(), o.Phonenumber.IsSet()
}

// HasPhonenumber returns a boolean if a field has been set.
func (o *Member) HasPhonenumber() bool {
	if o != nil && o.Phonenumber.IsSet() {
		return true
	}

	return false
}

// SetPhonenumber gets a reference to the given NullableString and assigns it to the Phonenumber field.
func (o *Member) SetPhonenumber(v string) {
	o.Phonenumber.Set(&v)
}
// SetPhonenumberNil sets the value for Phonenumber to be an explicit nil
func (o *Member) SetPhonenumberNil() {
	o.Phonenumber.Set(nil)
}

// UnsetPhonenumber ensures that no value is present for Phonenumber, not even an explicit nil
func (o *Member) UnsetPhonenumber() {
	o.Phonenumber.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Member) GetGender() OneOfGenderEnumBlankEnumNullEnum {
	if o == nil  {
		var ret OneOfGenderEnumBlankEnumNullEnum
		return ret
	}
	return o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Member) GetGenderOk() (*OneOfGenderEnumBlankEnumNullEnum, bool) {
	if o == nil || o.Gender == nil {
		return nil, false
	}
	return &o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *Member) HasGender() bool {
	if o != nil && o.Gender != nil {
		return true
	}

	return false
}

// SetGender gets a reference to the given OneOfGenderEnumBlankEnumNullEnum and assigns it to the Gender field.
func (o *Member) SetGender(v OneOfGenderEnumBlankEnumNullEnum) {
	o.Gender = v
}

// GetDOB returns the DOB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Member) GetDOB() string {
	if o == nil || o.DOB.Get() == nil {
		var ret string
		return ret
	}
	return *o.DOB.Get()
}

// GetDOBOk returns a tuple with the DOB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Member) GetDOBOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DOB.Get(), o.DOB.IsSet()
}

// HasDOB returns a boolean if a field has been set.
func (o *Member) HasDOB() bool {
	if o != nil && o.DOB.IsSet() {
		return true
	}

	return false
}

// SetDOB gets a reference to the given NullableString and assigns it to the DOB field.
func (o *Member) SetDOB(v string) {
	o.DOB.Set(&v)
}
// SetDOBNil sets the value for DOB to be an explicit nil
func (o *Member) SetDOBNil() {
	o.DOB.Set(nil)
}

// UnsetDOB ensures that no value is present for DOB, not even an explicit nil
func (o *Member) UnsetDOB() {
	o.DOB.Unset()
}

// GetJoinTimestamp returns the JoinTimestamp field value
func (o *Member) GetJoinTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.JoinTimestamp
}

// GetJoinTimestampOk returns a tuple with the JoinTimestamp field value
// and a boolean to check if the value has been set.
func (o *Member) GetJoinTimestampOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JoinTimestamp, true
}

// SetJoinTimestamp sets field value
func (o *Member) SetJoinTimestamp(v time.Time) {
	o.JoinTimestamp = v
}

// GetIssuesCount returns the IssuesCount field value
func (o *Member) GetIssuesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IssuesCount
}

// GetIssuesCountOk returns a tuple with the IssuesCount field value
// and a boolean to check if the value has been set.
func (o *Member) GetIssuesCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssuesCount, true
}

// SetIssuesCount sets field value
func (o *Member) SetIssuesCount(v int32) {
	o.IssuesCount = v
}

// GetRating returns the Rating field value
func (o *Member) GetRating() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *Member) GetRatingOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *Member) SetRating(v float64) {
	o.Rating = v
}

func (o Member) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["first_name"] = o.FirstName
	}
	if true {
		toSerialize["last_name"] = o.LastName
	}
	if o.Phonenumber.IsSet() {
		toSerialize["phonenumber"] = o.Phonenumber.Get()
	}
	if o.Gender != nil {
		toSerialize["gender"] = o.Gender
	}
	if o.DOB.IsSet() {
		toSerialize["DOB"] = o.DOB.Get()
	}
	if true {
		toSerialize["join_timestamp"] = o.JoinTimestamp
	}
	if true {
		toSerialize["issues_count"] = o.IssuesCount
	}
	if true {
		toSerialize["rating"] = o.Rating
	}
	return json.Marshal(toSerialize)
}

type NullableMember struct {
	value *Member
	isSet bool
}

func (v NullableMember) Get() *Member {
	return v.value
}

func (v *NullableMember) Set(val *Member) {
	v.value = val
	v.isSet = true
}

func (v NullableMember) IsSet() bool {
	return v.isSet
}

func (v *NullableMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMember(val *Member) *NullableMember {
	return &NullableMember{value: val, isSet: true}
}

func (v NullableMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


